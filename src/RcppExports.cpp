// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// force_materialization
void force_materialization(SEXP x);
RcppExport SEXP _vroom_force_materialization(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    force_materialization(x);
    return R_NilValue;
END_RCPP
}
// vroom_materialize
void vroom_materialize(Rcpp::List x);
RcppExport SEXP _vroom_vroom_materialize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    vroom_materialize(x);
    return R_NilValue;
END_RCPP
}
// gen_character_
CharacterVector gen_character_(int n, int min, int max, std::string values);
RcppExport SEXP _vroom_gen_character_(SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    Rcpp::traits::input_parameter< std::string >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_character_(n, min, max, values));
    return rcpp_result_gen;
END_RCPP
}
// vroom_
SEXP vroom_(List inputs, SEXP delim, const char quote, bool trim_ws, bool escape_double, bool escape_backslash, const char comment, RObject col_names, RObject col_types, RObject col_keep, RObject col_skip, SEXP id, size_t skip, size_t n_max, CharacterVector na, List locale, bool use_altrep_chr, bool use_altrep_fct, bool use_altrep_int, bool use_altrep_dbl, bool use_altrep_num, bool use_altrep_lgl, bool use_altrep_dttm, bool use_altrep_date, bool use_altrep_time, size_t guess_max, size_t num_threads, bool progress);
RcppExport SEXP _vroom_vroom_(SEXP inputsSEXP, SEXP delimSEXP, SEXP quoteSEXP, SEXP trim_wsSEXP, SEXP escape_doubleSEXP, SEXP escape_backslashSEXP, SEXP commentSEXP, SEXP col_namesSEXP, SEXP col_typesSEXP, SEXP col_keepSEXP, SEXP col_skipSEXP, SEXP idSEXP, SEXP skipSEXP, SEXP n_maxSEXP, SEXP naSEXP, SEXP localeSEXP, SEXP use_altrep_chrSEXP, SEXP use_altrep_fctSEXP, SEXP use_altrep_intSEXP, SEXP use_altrep_dblSEXP, SEXP use_altrep_numSEXP, SEXP use_altrep_lglSEXP, SEXP use_altrep_dttmSEXP, SEXP use_altrep_dateSEXP, SEXP use_altrep_timeSEXP, SEXP guess_maxSEXP, SEXP num_threadsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delim(delimSEXP);
    Rcpp::traits::input_parameter< const char >::type quote(quoteSEXP);
    Rcpp::traits::input_parameter< bool >::type trim_ws(trim_wsSEXP);
    Rcpp::traits::input_parameter< bool >::type escape_double(escape_doubleSEXP);
    Rcpp::traits::input_parameter< bool >::type escape_backslash(escape_backslashSEXP);
    Rcpp::traits::input_parameter< const char >::type comment(commentSEXP);
    Rcpp::traits::input_parameter< RObject >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< RObject >::type col_types(col_typesSEXP);
    Rcpp::traits::input_parameter< RObject >::type col_keep(col_keepSEXP);
    Rcpp::traits::input_parameter< RObject >::type col_skip(col_skipSEXP);
    Rcpp::traits::input_parameter< SEXP >::type id(idSEXP);
    Rcpp::traits::input_parameter< size_t >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_max(n_maxSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type na(naSEXP);
    Rcpp::traits::input_parameter< List >::type locale(localeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_chr(use_altrep_chrSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_fct(use_altrep_fctSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_int(use_altrep_intSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_dbl(use_altrep_dblSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_num(use_altrep_numSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_lgl(use_altrep_lglSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_dttm(use_altrep_dttmSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_date(use_altrep_dateSEXP);
    Rcpp::traits::input_parameter< bool >::type use_altrep_time(use_altrep_timeSEXP);
    Rcpp::traits::input_parameter< size_t >::type guess_max(guess_maxSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(vroom_(inputs, delim, quote, trim_ws, escape_double, escape_backslash, comment, col_names, col_types, col_keep, col_skip, id, skip, n_max, na, locale, use_altrep_chr, use_altrep_fct, use_altrep_int, use_altrep_dbl, use_altrep_num, use_altrep_lgl, use_altrep_dttm, use_altrep_date, use_altrep_time, guess_max, num_threads, progress));
    return rcpp_result_gen;
END_RCPP
}
// vroom_fwf
List vroom_fwf(std::string filename, std::vector<size_t> col_starts, std::vector<size_t> col_ends);
RcppExport SEXP _vroom_vroom_fwf(SEXP filenameSEXP, SEXP col_startsSEXP, SEXP col_endsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type col_starts(col_startsSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type col_ends(col_endsSEXP);
    rcpp_result_gen = Rcpp::wrap(vroom_fwf(filename, col_starts, col_ends));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vroom_force_materialization", (DL_FUNC) &_vroom_force_materialization, 1},
    {"_vroom_vroom_materialize", (DL_FUNC) &_vroom_vroom_materialize, 1},
    {"_vroom_gen_character_", (DL_FUNC) &_vroom_gen_character_, 4},
    {"_vroom_vroom_", (DL_FUNC) &_vroom_vroom_, 28},
    {"_vroom_vroom_fwf", (DL_FUNC) &_vroom_vroom_fwf, 3},
    {NULL, NULL, 0}
};

void init_vroom_chr(DllInfo* dll);
void init_vroom_date(DllInfo* dll);
void init_vroom_dbl(DllInfo* dll);
void init_vroom_dttm(DllInfo* dll);
void init_vroom_fct(DllInfo* dll);
void init_vroom_int(DllInfo* dll);
void init_vroom_num(DllInfo* dll);
void init_vroom_time(DllInfo* dll);
RcppExport void R_init_vroom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    init_vroom_chr(dll);
    init_vroom_date(dll);
    init_vroom_dbl(dll);
    init_vroom_dttm(dll);
    init_vroom_fct(dll);
    init_vroom_int(dll);
    init_vroom_num(dll);
    init_vroom_time(dll);
}
